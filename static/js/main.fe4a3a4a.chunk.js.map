{"version":3,"sources":["components/Form/fields/FormFieldInput.js","components/Form/fields/FormFieldCheckbox.js","components/Form/fields/FormFieldDate.js","components/Form/fields/FormFieldSpace.js","components/Form/fields/FormFieldSelect.js","components/Form/fields/FormFieldFile.js","components/Form/Form.js","App.js","reportWebVitals.js","index.js"],"names":["FormFieldInput","name","value","readonly","required","label","placeholder","onChange","handleChange","useCallback","event","target","TextField","margin","variant","fullWidth","disabled","FormFieldCheckbox","checkboxList","optionLabel","checked","filter","option","Fragment","FormLabel","component","map","i","FormControlLabel","control","Checkbox","some","color","FormFieldDate","type","InputLabelProps","shrink","FormFieldSpace","height","style","COUNTRIES","id","FormFieldSelect","select","MenuItem","useStyles","makeStyles","input","display","FIELDS_MAP","TEXT_FIELD","CHECKBOX","DATE_INPUT_DROPDOWN","SPACING","COUNTRY_SELECT","FILE_INPUT","classes","files","className","root","accept","Button","Typography","Form","fields","onSubmit","useState","values","setValues","handleSubmit","preventDefault","formData","FormData","key","append","autoComplete","field","FieldComponent","_id","App","data","object","forEach","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe4a3a4a.chunk.js","sourcesContent":["import { useCallback } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\n\nconst FormFieldInput = ({ name, value = '', readonly, required, label, placeholder, onChange }) => {\n    const handleChange = useCallback(event => {\n        onChange(event.target.value)\n    }, [onChange]);\n\n    return <TextField\n        margin='normal'\n        variant='outlined'\n        fullWidth\n        name={name}\n        value={value}\n        onChange={handleChange}\n        label={label}\n        placeholder={placeholder}\n        disabled={readonly}\n        required={required}\n    />\n}\n\nexport default FormFieldInput;\n","import React, {useCallback} from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst FormFieldCheckbox = ({ name, label, value = [], onChange, checkboxList = [] }) => {\n    const handleChange = useCallback(optionLabel => event => {\n        onChange(event.target.checked ? [...value, optionLabel] : value.filter(option => option !== optionLabel))\n    }, [value, onChange]);\n\n    return <React.Fragment>\n        <FormLabel component='legend'>{label}</FormLabel>\n        {checkboxList.map(({ value: label, checked, disabled }, i) => {\n            return <FormControlLabel\n                key={i}\n                control={\n                    <Checkbox\n                        name={name}\n                        checked={value.some(option => option === label)}\n                        onChange={handleChange(label)}\n                        color='primary'\n                        disabled={disabled}\n                    />\n                }\n                label={label}\n            />\n        })}\n    </React.Fragment>\n}\n\nexport default FormFieldCheckbox;\n","import { useCallback } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\n\nconst FormFieldDate = ({ value = '', name, required, label, onChange }) => {\n    const handleChange = useCallback(event => {\n        onChange(event.target.value)\n    }, [onChange]);\n\n    return <TextField\n        fullWidth\n        value={value}\n        name={name}\n        label={label}\n        onChange={handleChange}\n        required={required}\n        margin='normal'\n        variant='outlined'\n        type='date'\n        InputLabelProps={{\n            shrink: true\n        }}\n    />;\n}\n\nexport default FormFieldDate;\n","const FormFieldSpace = ({ height }) => {\n    return <div style={{ height: `${height}px` }} />\n};\n\nexport default FormFieldSpace;\n","import { useCallback } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst COUNTRIES = [\n    { id: 0, name: 'Ukraine', value: 'ua' },\n    { id: 1, name: 'France', value: 'fr' },\n    { id: 2, name: 'England', value: 'en' }\n]\n\nconst FormFieldSelect = ({ name, value = '', label, onChange }) => {\n    const handleChange = useCallback(event => {\n        onChange(event.target.value)\n    }, [onChange]);\n\n    return <TextField\n        label={label}\n        name={name}\n        value={value}\n        onChange={handleChange}\n        margin='normal'\n        variant='outlined'\n        select\n        fullWidth\n    >\n        {\n            COUNTRIES.map(({ value, name }, i) => (\n                <MenuItem key={i} value={value}>\n                    {name}\n                </MenuItem>\n            ))\n        }\n    </TextField>\n}\n\nexport default FormFieldSelect;\n","import { useCallback } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    input: {\n        display: 'none'\n    },\n});\n\nexport default function UploadButtons({ label, value, onChange }) {\n    const classes = useStyles();\n\n    const handleChange = useCallback(event => {\n        onChange(event.target.files[0])\n    }, [onChange]);\n\n    return (\n        <div className={classes.root}>\n            <label>\n                <input\n                    accept='image/*'\n                    className={classes.input}\n                    onChange={handleChange}\n                    type='file'\n                />\n                <Button variant='contained' color='primary' component='span'>\n                    {label || 'UPLOAD'}\n                </Button>\n            </label>\n            {value && <Typography>{value.name}</Typography>}\n        </div>\n    );\n}\n","import { useState, useCallback } from 'react';\nimport FormFieldInput from './fields/FormFieldInput';\nimport FormFieldCheckbox from './fields/FormFieldCheckbox';\nimport FormFieldDate from './fields/FormFieldDate';\nimport FormFieldSpace from './fields/FormFieldSpace';\nimport FormFieldSelect from './fields/FormFieldSelect';\nimport FormFieldFile from './fields/FormFieldFile';\n\nimport Button from '@material-ui/core/Button';\n\nimport './Form.css';\n\nconst FIELDS_MAP = {\n    TEXT_FIELD: FormFieldInput,\n    CHECKBOX: FormFieldCheckbox,\n    DATE_INPUT_DROPDOWN: FormFieldDate,\n    SPACING: FormFieldSpace,\n    COUNTRY_SELECT: FormFieldSelect,\n    FILE_INPUT: FormFieldFile\n};\n\nconst Form = ({ fields, onSubmit }) => {\n    const [values, setValues] = useState({});\n\n    const handleChange = useCallback(name => value => {\n        setValues(values => ({ ...values, [name]: value }))\n    }, []);\n\n    const handleSubmit = useCallback((event) => {\n        event.preventDefault();\n        const formData = new FormData();\n\n        for (let key in values ) {\n            formData.append(key, values[key]);\n        }\n\n        onSubmit(formData);\n    }, [values, onSubmit]);\n\n    return <form className='form' autoComplete='off' onSubmit={handleSubmit}>\n        {\n            fields.map(field => {\n                const FieldComponent = FIELDS_MAP[field.type];\n                return FieldComponent ? <div key={field._id}>\n                    <FieldComponent {...field} onChange={handleChange(field.name)} value={values[field.name]} />\n                </div> : null;\n            })\n        }\n        <div className='submitBtn'>\n            <Button\n                variant='contained'\n                color='primary'\n                type='submit'\n            >\n                Submit\n            </Button>\n        </div>\n    </form>\n}\n\nexport default Form;\n","import { useCallback } from 'react';\nimport data from './data.json';\n\nimport Form from './components/Form/Form';\n\nimport './App.css';\n\nconst App = () => {\n    const handleSubmit = useCallback(data => {\n        const object = {};\n\n        data.forEach((value, key) => {\n            object[key] = value;\n        });\n        console.log('Parsed FormData:', object); // results\n    }, []);\n\n    return <section className='root'>\n        <Form fields={data} onSubmit={handleSubmit} />\n    </section>\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}